docker 启动 nginx
1、需求创建四个目录
/nginx/conf
/nginx/conf/conf.d
/nginx/html
/nginx/log
2、需要把nginx中的image中的相应的配置与html给cp出来放在上面三个目录中
最好是先启一个tmp的ngix，把相应的目录给cp出来，后面有相应的文件的源码 （ docker run -p 8981:80 -d --name nginx_tmp nginx:latest ）


=====================================================================================================

nginx/
├── conf
│   ├── conf.d
│   │   ├── default.conf
│   │   └── smallman.conf
│   └── nginx.conf
├── docker-compose.yml
├── html
├── log
│   ├── access.log
│   └── error.log
└── ssl
    ├── cert.pem
    ├── fullchain.pem
    └── privkey.pem

----------------------------------------------------------------------------------------------
docker_compose.yml

networks:
  frontend: 
    driver: bridge


x-common-config: &common-config
  restart: unless-stopped 
  logging:
    driver: "json-file" 
    options:
      max-size: "10m"
      max-file: "3"
  environment:
    - TZ=Asia/Shanghai
  security_opt:
    - no-new-privileges:true # 防止容器进程获得新权限


services:
  # 通常作为入口点，处理 SSL 终止、负载均衡、静态文件等
  nginx:
    image: nginx:1.29.1-alpine
    <<: *common-config
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro 
      - ./conf/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl:ro 
      - ./html:/usr/share/nginx/html:ro
      - ./log:/var/log/nginx
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - frontend 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M



-------------------------------------------------------------------------------
smallman.conf

    server {
        listen 80 default_server;
        #        server_name www.smallman.com.cn;

        location = /nginx-health {
            access_log off;
            add_header Content-Type text/plain;
            allow all;
            return 200 "OK";
        }
        #        location = /{
        # 强制跳转到 HTTPS (推荐)
        #    return 301 https://$server_name$request_uri;
        #}
    }

    server {
        listen 443 ssl;
        server_name music.smallman.com.cn;

        # SSL 证书配置 (确保证书文件已挂载到容器内的 /etc/nginx/ssl/)
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://172.19.235.169:6698/musics/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 静态文件处理 (如果应用提供且希望由 Nginx 处理)
        # location /static/ {
        #     alias /usr/share/nginx/html/static/;
        #     expires 1y;
        #     add_header Cache-Control "public, immutable";
        # }

        # 健康检查端点 (可选，供外部监控)
        # location /health {
        #     access_log off;
        #     return 200 'OK';
        #     add_header Content-Type text/plain;
        # }
    }


==========================================================================================
#对应容器：/etc/nginx/nginx.conf
#本地目录：/nginx/conf/nginx.conf
#以下为正文
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;

events {
    worker_connections  1024;
    use epoll;                  # Linux 推荐使用 epoll（高性能）
    multi_accept on;            # 一次接受多个连接（提升吞吐）
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;         # 优化网络包发送
    tcp_nodelay     on;         # 实时发送小包（适合 API）
    keepalive_timeout  65;

    #开启 gzip 压缩（节省带宽）
    gzip on;
    gzip_vary on;
    gzip_min_length 1k;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript;

    include /etc/nginx/conf.d/*.conf;
}

#对应自定义的站点：
#对应容器：/etc/nginx/conf.d/
#本地目录：/nginx/conf/conf.d/
#文件名：custom.conf

server {
    listen 80;                          # ⭐️⭐️⭐️ 监听端口
    server_name example.com www.example.com;  # ⭐️⭐️⭐️ 域名


    #root vs alias：
    #root：路径拼接 → root /data; location /img/ { ... } → /data/img/xxx
    #alias：路径替换 → alias /data/; location /img/ { ... } → /data/xxx

    root /var/www/html;                 # ⭐️⭐️⭐️ 站点根目录
    index index.html index.htm;         # 默认首页

    # ⭐️⭐️⭐️ 访问日志（可覆盖全局）
    access_log /var/log/nginx/example.access.log main;

    # ⭐️⭐️⭐️ 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    # ⭐️⭐️⭐️ location：匹配 URI 路径
    location / {
        try_files $uri $uri/ =404;      # 尝试文件 → 目录 → 404  try_files：优雅降级，常用于 SPA（如 Vue/React）
    }

    location ~ \.php$ {
        fastcgi_pass unix:/run/php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}



====================================================================================
location 块(请求路由匹配)

    = → 精确匹配（最高优先级） 精确匹配首页，提升性能
    ^~ → 前缀匹配，匹配后不再查正则  使用 ^~ 避免正则干扰静态资源
    ~ → 区分大小写的正则匹配
    ~* → 不区分大小写的正则匹配  忽略大小写（图片/静态文件）
    /xxx → 普通前缀匹配（最长前缀优先）
    / → 默认匹配  是兜底规则，必须有！

------------------------------------------------------------------
location = / {
    # 只匹配 http://example.com/
}

location ^~ /static/ {
    # 匹配 /static/ 开头，且不再匹配正则（如 .js, .css）
    expires 1y;
    add_header Cache-Control "public, immutable";
}

location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
}

location / {
    # 所有其他请求
    try_files $uri $uri/ /index.html;
}

------------------------------------------------------------------
反向代理（Reverse Proxy）
location /api/ {
    proxy_pass http://backend_server;   # ⭐️⭐️⭐️ 代理到后端
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

---------------------------------------------------------------
负载均衡
http{
    upstream backend {
        server 10.0.0.1:8000;
        server 10.0.0.2:8000;
        server 10.0.0.3:8000 backup;   # 备用节点
    }
    
    server {
        location / {
            proxy_pass http://backend;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            ...
        }
    }
}


加权轮询（Weighted Round Robin）
upstream backend {
    server 192.168.1.10:8080 weight=3;  # 处理 3/6 = 50% 请求
    server 192.168.1.11:8080 weight=2;  # 处理 2/6 ≈ 33% 请求
    server 192.168.1.12:8080 weight=1;  # 处理 1/6 ≈ 17% 请求
}

最少连接（Least Connections）
least_conn; #新请求分配给当前连接数最少的服务器。      适用：长连接、连接处理时间不均的场景（如 WebSocket、视频流）

ip_hash;

一致性哈希（Hash);
hash $request_uri consistent;    #根据指定变量（如 $request_uri, $cookie_session）哈希，相同值始终路由到同一服务器。  适用：缓存场景（如 CDN、图片服务器），避免缓存重复

#如果超过3次表示失败
upstream backend {
    server 192.168.1.10:8080 max_fails=3 fail_timeout=30s;  #max_fails=3 → 在 fail_timeout 时间内，如果该服务器连续失败 3 次，Nginx 会将其标记为“不可用”。fail_timeout=30s → “失败计时窗口”为 30 秒。30 秒后，Nginx 会再次尝试将请求发给这个服务器（即使之前标记为不可用）。
    server 192.168.1.11:8080 max_fails=3 fail_timeout=30s;
    server 192.168.1.12:8080 backup;  # 备用服务器
}

启用缓存减轻后端压力
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m;

location / {
    proxy_cache my_cache;
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;
    proxy_pass http://backend;
}

------------------------------------------------------------
HTTPS  

server {
    listen 443 ssl http2;
    server_name example.com;

    ssl_certificate /path/to/fullchain.pem;      # ⭐️⭐️⭐️ 证书
    ssl_certificate_key /path/to/privkey.pem;    # ⭐️⭐️⭐️ 私钥

    ssl_protocols TLSv1.2 TLSv1.3;               # ⭐️⭐️⭐️ 安全协议
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers off;

    # HSTS（强制 HTTPS）
    add_header Strict-Transport-Security "max-age=63072000" always;

    root /var/www/html;
    ...
}







3、docker run -p 8981:80 \
    -d --name nginx \
    -v /home/yematech/docker_data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
    -v /home/yematech/docker_data/nginx/conf/conf.d:/etc/nginx/conf.d \
    -v /home/yematech/docker_data/nginx/ssl:/ssl \
    -v /home/yematech/docker_data/nginx/html:/usr/share/nginx/html \
    -v /home/yematech/docker_data/nginx/log:/var/log/nginx \
    nginx:latest




2.1）/nginx/conf/conf.d/default.conf
server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


2.3) /nginx/html/index.html
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

2.4) /nginx/html/50x.html
<!DOCTYPE html>
<html>
<head>
<title>Error</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>An error occurred.</h1>
<p>Sorry, the page you are looking for is currently unavailable.<br/>
Please try again later.</p>
<p>If you are the system administrator of this resource then you should check
the error log for details.</p>
<p><em>Faithfully yours, nginx.</em></p>
</body>
</html>
